datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Level {
  id String @id @default(uuid())
  title String
  subjects Subject[]
}



model Subject {
  id String @id @default(uuid())
  levelId      String
  level        Level  @relation(fields: [levelId], references: [id], onDelete: Cascade)
  imageUrl String? @db.Text
  isPublished Boolean @default(false)
  title String
  categorys Category[]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  purchases Purchase[]
  quiz   Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  // @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  subjectId String
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}
model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  imageUrl String? @db.Text

  videoUrl String? @db.Text
  position Int
  
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        Int        @id @default(autoincrement())
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String
  questions Question[]
  answers   Answer[]
  createdAt DateTime   @default(now())
}

model Question {
  id            Int      @id @default(autoincrement())
  quizId        Int
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  title         String   @default("Question")
  questionText  String
  type          String
  correctAnswer String
  explanation   String    @default("Explanation")
  options       Option[]
  answers   Answer[]
  createdAt     DateTime      @default(now())
}

model Option {
  id         Int      @id @default(autoincrement())
  label      String
  value      String
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Answer {
  id         Int      @id @default(autoincrement())
  userId     String
  quizId     Int
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     String
  createdAt  DateTime @default(now())
}